fn func() { }
fn other_func() { }

// ==
assert(true == true, "true == true");
assert("string" == "string", "string == string");
assert(123 == 123, "123 == 123");
assert(func == func, "func == func");
assert(123.456 == 123.456, "123.456 == 123.456");

// !=
assert(true != false, "true != false");
assert("string" != "empty", "string != empty");
assert(123 != 456, "123 != 456");
assert(func != other_func, "func != other_func");

assert(true != "string", "true != string");
assert(true != func, "true != func");
assert("string" != func, "string != func");
assert("func" != func, "func != func");

// <
assert(10 < 20, "10 < 20");
assert(10.456 < 20.789, "10.456 < 20.789");
assert(10 < 10.1, "10 < 10.1");

// <=
assert(9 <= 10, "9 <= 10");
assert(10 <= 10, "10 <= 10");
assert(10.456 <= 10.456, "10.456 <= 10.456");
assert(10.456 <= 20.789, "10.456 <= 20.789");

// >
assert(20 > 10, "20 > 10");
assert(20.789 > 10.456, "20.789 > 10.456");
// assert("def" > "abc", "abc > def"); // not implemented
assert(10.1 > 10, "10 > 10.1");

// >=
assert(20 >= 10, "20 >= 10");
assert(20 >= 20, "20 >= 20");
assert(10.456 >= 10.456, "10.456 >= 10.456");
// assert("def" > "abc", "abc > def"); // not implemented
assert(10.1 > 10, "10 > 10.1");
