[
  {
    "name": "Assert Test",
    "description": "Expect Assert() to fail on a false value",
    "reason": "To check the assert() functions correctly",
    "file": "assert_test.lox",
    "expect": {
      "to_fail": true,
      "on_line": 8,
      "has_return_code": 70
    }
  },
  {
    "name": "Print Test",
    "description": "Expect print() to print to stdout",
    "reason": "To check print() correctly handles printing of all values",
    "file": "print_test.lox",
    "expect": {
      "to_output": [
        "Hello World",
        "nil",
        123,
        "true",
        "false",
        "<fn fn_to_print>",
        "<class Cls>"
      ]
    }
  },
  {
    "name": "Str Test",
    "description": "Expect str() to convert items to string",
    "reason": "To check print() correctly handles printing of all values",
    "file": "print_test.lox",
    "expect": {
      "to_output": [
        "Hello World",
        "nil",
        123,
        "true",
        "false",
        "<fn fn_to_print>"
      ]
    }
  },
  {
    "name": "Clock Test",
    "description": "Expect clock() to return a number representing the current unix time",
    "reason": "To check clock() correctly returns a number",
    "file": "clock_test.lox",
    "expect": {}
  },
  {
    "name": "Read Test",
    "description": "Expect read() to read an unlimited number of characters and break on newlines",
    "reason": "To check read() works as expected",
    "file": "read_test.lox",
    "to_stdin": "a string\nan extra long string that is longer than 256 characters, i.e. longer than a single read() pass.abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijk\nq\n",
    "expect": {
      "to_output": [
        "a string",
        "an extra long string that is longer than 256 characters, i.e. longer than a single read() pass.abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijk"
      ]
    }
  },
  {
    "name": "Num Test",
    "description": "Expect num() to convert strings in to numbers",
    "reason": "To check num() works as expected",
    "file": "num_test.lox",
    "expect": {}
  },
  {
    "name": "Round Test",
    "description": "Expect round() to round numbers to the given number of decimal points",
    "reason": "To check round() works as expected",
    "file": "round_test.lox",
    "expect": {}
  },
  {
    "name": "Round invalid literal test",
    "description": "Expect round() to only accept numbers",
    "reason": "To check round() works as expected",
    "file": "round_invalid_literal.lox",
    "expect": {
      "to_fail": true,
      "has_return_code": 70,
      "on_line": 3,
      "to_error": [
        "Argument is not a number"
      ]
    }
  },
  {
    "name": "len count test",
    "description": "Expect len() to count the length of a string",
    "reason": "To check len() works as expected",
    "file": "len_test.lox",
    "expect": {}
  },
  {
    "name": "len invalid arg count test",
    "description": "Expect len() to only accept a single argument",
    "file": "len_invalid_arg_cnt.lox",
    "expect": {
      "to_fail": true,
      "has_return_code": 70,
      "on_line": 1,
      "to_error": [
        "Invalid number of arguments"
      ]
    }
  },
  {
    "name": "len invalid arg test",
    "description": "Expect len() to only accept strings",
    "file": "len_invalid_arg.lox",
    "expect": {
      "to_fail": true,
      "has_return_code": 70,
      "on_line": 1,
      "to_error": [
        "len() only accepts strings"
      ]
    }
  }
]